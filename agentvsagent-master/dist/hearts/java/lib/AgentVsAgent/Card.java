/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package AgentVsAgent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Card implements org.apache.thrift.TBase<Card, Card._Fields>, java.io.Serializable, Cloneable, Comparable<Card> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Card");

  private static final org.apache.thrift.protocol.TField SUIT_FIELD_DESC = new org.apache.thrift.protocol.TField("suit", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CardTupleSchemeFactory());
  }

  /**
   * 
   * @see Suit
   */
  public Suit suit; // required
  /**
   * 
   * @see Rank
   */
  public Rank rank; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Suit
     */
    SUIT((short)1, "suit"),
    /**
     * 
     * @see Rank
     */
    RANK((short)2, "rank");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUIT
          return SUIT;
        case 2: // RANK
          return RANK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUIT, new org.apache.thrift.meta_data.FieldMetaData("suit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Suit.class)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Rank.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Card.class, metaDataMap);
  }

  public Card() {
  }

  public Card(
    Suit suit,
    Rank rank)
  {
    this();
    this.suit = suit;
    this.rank = rank;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Card(Card other) {
    if (other.isSetSuit()) {
      this.suit = other.suit;
    }
    if (other.isSetRank()) {
      this.rank = other.rank;
    }
  }

  public Card deepCopy() {
    return new Card(this);
  }

  @Override
  public void clear() {
    this.suit = null;
    this.rank = null;
  }

  /**
   * 
   * @see Suit
   */
  public Suit getSuit() {
    return this.suit;
  }

  /**
   * 
   * @see Suit
   */
  public Card setSuit(Suit suit) {
    this.suit = suit;
    return this;
  }

  public void unsetSuit() {
    this.suit = null;
  }

  /** Returns true if field suit is set (has been assigned a value) and false otherwise */
  public boolean isSetSuit() {
    return this.suit != null;
  }

  public void setSuitIsSet(boolean value) {
    if (!value) {
      this.suit = null;
    }
  }

  /**
   * 
   * @see Rank
   */
  public Rank getRank() {
    return this.rank;
  }

  /**
   * 
   * @see Rank
   */
  public Card setRank(Rank rank) {
    this.rank = rank;
    return this;
  }

  public void unsetRank() {
    this.rank = null;
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return this.rank != null;
  }

  public void setRankIsSet(boolean value) {
    if (!value) {
      this.rank = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUIT:
      if (value == null) {
        unsetSuit();
      } else {
        setSuit((Suit)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Rank)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUIT:
      return getSuit();

    case RANK:
      return getRank();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUIT:
      return isSetSuit();
    case RANK:
      return isSetRank();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Card)
      return this.equals((Card)that);
    return false;
  }

  public boolean equals(Card that) {
    if (that == null)
      return false;

    boolean this_present_suit = true && this.isSetSuit();
    boolean that_present_suit = true && that.isSetSuit();
    if (this_present_suit || that_present_suit) {
      if (!(this_present_suit && that_present_suit))
        return false;
      if (!this.suit.equals(that.suit))
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (!this.rank.equals(that.rank))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Card other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSuit()).compareTo(other.isSetSuit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suit, other.suit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Card(");
    boolean first = true;

    sb.append("suit:");
    if (this.suit == null) {
      sb.append("null");
    } else {
      sb.append(this.suit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rank:");
    if (this.rank == null) {
      sb.append("null");
    } else {
      sb.append(this.rank);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (suit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'suit' was not present! Struct: " + toString());
    }
    if (rank == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rank' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CardStandardSchemeFactory implements SchemeFactory {
    public CardStandardScheme getScheme() {
      return new CardStandardScheme();
    }
  }

  private static class CardStandardScheme extends StandardScheme<Card> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Card struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suit = Suit.findByValue(iprot.readI32());
              struct.setSuitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rank = Rank.findByValue(iprot.readI32());
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Card struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suit != null) {
        oprot.writeFieldBegin(SUIT_FIELD_DESC);
        oprot.writeI32(struct.suit.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.rank != null) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI32(struct.rank.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CardTupleSchemeFactory implements SchemeFactory {
    public CardTupleScheme getScheme() {
      return new CardTupleScheme();
    }
  }

  private static class CardTupleScheme extends TupleScheme<Card> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Card struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.suit.getValue());
      oprot.writeI32(struct.rank.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Card struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.suit = Suit.findByValue(iprot.readI32());
      struct.setSuitIsSet(true);
      struct.rank = Rank.findByValue(iprot.readI32());
      struct.setRankIsSet(true);
    }
  }

}

