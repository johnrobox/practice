//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./tic_tac_toe_types');
//HELPER FUNCTIONS AND STRUCTURES

AgentVsAgent.TicTacToe_enter_arena_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
AgentVsAgent.TicTacToe_enter_arena_args.prototype = {};
AgentVsAgent.TicTacToe_enter_arena_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.EntryRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_enter_arena_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_enter_arena_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_enter_arena_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AgentVsAgent.TicTacToe_enter_arena_result.prototype = {};
AgentVsAgent.TicTacToe_enter_arena_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EntryResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_enter_arena_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_enter_arena_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_info_args = function(args) {
  this.ticket = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
  }
};
AgentVsAgent.TicTacToe_get_game_info_args.prototype = {};
AgentVsAgent.TicTacToe_get_game_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new ttypes.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_info_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_info_args');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_info_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.GameAbortedException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
  }
};
AgentVsAgent.TicTacToe_get_game_info_result.prototype = {};
AgentVsAgent.TicTacToe_get_game_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GameInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.GameAbortedException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_info_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_make_move_args = function(args) {
  this.ticket = null;
  this.boardRow = null;
  this.boardCol = null;
  this.squareRow = null;
  this.squareCol = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
    if (args.boardRow !== undefined) {
      this.boardRow = args.boardRow;
    }
    if (args.boardCol !== undefined) {
      this.boardCol = args.boardCol;
    }
    if (args.squareRow !== undefined) {
      this.squareRow = args.squareRow;
    }
    if (args.squareCol !== undefined) {
      this.squareCol = args.squareCol;
    }
  }
};
AgentVsAgent.TicTacToe_make_move_args.prototype = {};
AgentVsAgent.TicTacToe_make_move_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new ttypes.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.boardRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.boardCol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.squareRow = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.squareCol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_make_move_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_make_move_args');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  if (this.boardRow !== null && this.boardRow !== undefined) {
    output.writeFieldBegin('boardRow', Thrift.Type.I32, 2);
    output.writeI32(this.boardRow);
    output.writeFieldEnd();
  }
  if (this.boardCol !== null && this.boardCol !== undefined) {
    output.writeFieldBegin('boardCol', Thrift.Type.I32, 3);
    output.writeI32(this.boardCol);
    output.writeFieldEnd();
  }
  if (this.squareRow !== null && this.squareRow !== undefined) {
    output.writeFieldBegin('squareRow', Thrift.Type.I32, 4);
    output.writeI32(this.squareRow);
    output.writeFieldEnd();
  }
  if (this.squareCol !== null && this.squareCol !== undefined) {
    output.writeFieldBegin('squareCol', Thrift.Type.I32, 5);
    output.writeI32(this.squareCol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_make_move_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.GameAbortedException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
  }
};
AgentVsAgent.TicTacToe_make_move_result.prototype = {};
AgentVsAgent.TicTacToe_make_move_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MoveResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.GameAbortedException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_make_move_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_make_move_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_result_args = function(args) {
  this.ticket = null;
  if (args) {
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
  }
};
AgentVsAgent.TicTacToe_get_game_result_args.prototype = {};
AgentVsAgent.TicTacToe_get_game_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new ttypes.Ticket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_result_args.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_result_args');
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 1);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_result_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.GameAbortedException) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
  }
};
AgentVsAgent.TicTacToe_get_game_result_result.prototype = {};
AgentVsAgent.TicTacToe_get_game_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GameResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.GameAbortedException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentVsAgent.TicTacToe_get_game_result_result.prototype.write = function(output) {
  output.writeStructBegin('TicTacToe_get_game_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentVsAgent.TicTacToeClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
AgentVsAgent.TicTacToeClient.prototype = {};
AgentVsAgent.TicTacToeClient.prototype.enter_arena = function(request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_enter_arena(request);
};

AgentVsAgent.TicTacToeClient.prototype.send_enter_arena = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enter_arena', Thrift.MessageType.CALL, this.seqid);
  var args = new AgentVsAgent.TicTacToe_enter_arena_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AgentVsAgent.TicTacToeClient.prototype.recv_enter_arena = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentVsAgent.TicTacToe_enter_arena_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('enter_arena failed: unknown result');
};
AgentVsAgent.TicTacToeClient.prototype.get_game_info = function(ticket, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_game_info(ticket);
};

AgentVsAgent.TicTacToeClient.prototype.send_get_game_info = function(ticket) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_game_info', Thrift.MessageType.CALL, this.seqid);
  var args = new AgentVsAgent.TicTacToe_get_game_info_args();
  args.ticket = ticket;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AgentVsAgent.TicTacToeClient.prototype.recv_get_game_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentVsAgent.TicTacToe_get_game_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_game_info failed: unknown result');
};
AgentVsAgent.TicTacToeClient.prototype.make_move = function(ticket, boardRow, boardCol, squareRow, squareCol, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_make_move(ticket, boardRow, boardCol, squareRow, squareCol);
};

AgentVsAgent.TicTacToeClient.prototype.send_make_move = function(ticket, boardRow, boardCol, squareRow, squareCol) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('make_move', Thrift.MessageType.CALL, this.seqid);
  var args = new AgentVsAgent.TicTacToe_make_move_args();
  args.ticket = ticket;
  args.boardRow = boardRow;
  args.boardCol = boardCol;
  args.squareRow = squareRow;
  args.squareCol = squareCol;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AgentVsAgent.TicTacToeClient.prototype.recv_make_move = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentVsAgent.TicTacToe_make_move_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('make_move failed: unknown result');
};
AgentVsAgent.TicTacToeClient.prototype.get_game_result = function(ticket, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_game_result(ticket);
};

AgentVsAgent.TicTacToeClient.prototype.send_get_game_result = function(ticket) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_game_result', Thrift.MessageType.CALL, this.seqid);
  var args = new AgentVsAgent.TicTacToe_get_game_result_args();
  args.ticket = ticket;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AgentVsAgent.TicTacToeClient.prototype.recv_get_game_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AgentVsAgent.TicTacToe_get_game_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_game_result failed: unknown result');
};
AgentVsAgent.TicTacToeProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AgentVsAgent.TicTacToeProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AgentVsAgent.TicTacToeProcessor.prototype.process_enter_arena = function(seqid, input, output) {
  var args = new AgentVsAgent.TicTacToe_enter_arena_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.enter_arena(args.request, function (err, result) {
    var result = new AgentVsAgent.TicTacToe_enter_arena_result((err != null ? err : {success: result}));
    output.writeMessageBegin("enter_arena", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AgentVsAgent.TicTacToeProcessor.prototype.process_get_game_info = function(seqid, input, output) {
  var args = new AgentVsAgent.TicTacToe_get_game_info_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_game_info(args.ticket, function (err, result) {
    var result = new AgentVsAgent.TicTacToe_get_game_info_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_game_info", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AgentVsAgent.TicTacToeProcessor.prototype.process_make_move = function(seqid, input, output) {
  var args = new AgentVsAgent.TicTacToe_make_move_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.make_move(args.ticket, args.boardRow, args.boardCol, args.squareRow, args.squareCol, function (err, result) {
    var result = new AgentVsAgent.TicTacToe_make_move_result((err != null ? err : {success: result}));
    output.writeMessageBegin("make_move", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AgentVsAgent.TicTacToeProcessor.prototype.process_get_game_result = function(seqid, input, output) {
  var args = new AgentVsAgent.TicTacToe_get_game_result_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_game_result(args.ticket, function (err, result) {
    var result = new AgentVsAgent.TicTacToe_get_game_result_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_game_result", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

